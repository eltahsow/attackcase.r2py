TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

mycontext['lock']= createlock()
class ABFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.Afn = filename+'.a'
        self.Bfn = filename+'.b'

        # make the files and add 'SE' to the readat file...
        try:
            mycontext['lock'].acquire(True)
            if create:
                self.Afile = openfile(self.Afn, create)
                self.Bfile = openfile(self.Bfn, create)
            else:
                if self.Afn in listfiles():
                    self.Afile = openfile(self.Afn, create)
                else:
                    self.Afile = openfile(self.Afn, True)
                    self.Afile.writeat('SE', 0)
                if self.Bfn in listfiles():
                    self.Bfile = openfile(self.Bfn, False)
                else:
                    self.Bfile = openfile(self.Bfn, True)
                    self.Bfile.writeat('SE', 0)

            if self.Afile.readat(None, 0) == "":
                #mycontext['lock'].acquire(True)
                self.Afile.writeat('SE', 0)
            if self.Bfile.readat(None, 0) == "":
                self.Bfile.writeat('SE', 0)

                #mycontext['lock'].release()
        except Exception as e:
            mycontext['lock'].release()
            pass

    def writeat(self,data,offset):
        # Write the requested data to the B file using the sandbox's writeat call
        try:
            if data!='' and data!=' ' and offset>=0 and offset<=len(self.Bfile.readat(None,0)):
                #print("writing")
                self.Bfile.writeat(data,offset)
                #mycontext['lock'].release()
        except Exception as e:
            mycontext['lock'].release()
            pass



    def readat(self,bytes,offset):
        # Read from the A file using the sandbox's readat...

        try:
            if offset is not None:
                read_str=self.Afile.readat(None,0)
                #print(read_str)
                len_of_file=len(read_str)
                if bytes:
                    if (bytes<=len_of_file) and ((offset+bytes)<=len_of_file) and (offset>=0) and (bytes>=0):
                        return self.Afile.readat(bytes,offset)
                else:
                    if offset>=0 and offset<len_of_file:
                        #print("valid")
                        return self.Afile.readat(bytes,offset)
                    else:
                        return ''
            else:
                return ''
        except Exception as e:
            mycontext['lock'].release()
            return ''

    def close(self):
        '''
        self.Afile.close()
        self.Bfile.close()
        '''
        read_str=self.Bfile.readat(None,0)
        len_of_file=len(read_str)
        if self.Bfile:
            self.Bfile.close()
        if len(read_str)>=2:
            if read_str[0]=='S' and read_str[-1]=='E':
                self.Afile.close()
                removefile(self.Afn)
                #mycontext['lock'].acquire(True)
                self.Afile = openfile(self.Afn,True)
                self.Afile.writeat(read_str,0)
        mycontext['lock'].release()
        self.Afile.close()

def ABopenfile(filename, create):
    return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
